What happens when you initialize a repository? Why do you need to do it?
When you initialize a repository it establishes the requirements for creating a repository.  It creates the directory to store changes and history.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area is a a spot to cache files to add to a commit, it's the inbetween place where files are selected from the working directory to add to the repository.

How can you use the staging area to make sure you have one commit per logical change?
You can stage individual files from the working directory and commit them one at a time to create incremental commits.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches allow you to maintain working/released code as well as experimental versions of code.

How do the diagrams help you visualize the branch structure?
Diagrams help you visualize inheritance, common ancestors, relations between different development branches.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging two branches creates a single branch and combines the accumulated changes between the two.  We show it in the diagram as wuch, because it clarifies the inheritance of the current master branch as well as where certain commits originated.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Automatic is obviously much faster, but it clearly can't account for every type of difference, that would be too complex.  Manual merging allows for more complicated merges, but is more time intensive.